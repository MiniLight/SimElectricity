	public static boolean demo(){
	    int size = 4; //Size of the square matrix
	    int nz = 10;  //Number of non zero entries
	    int[] Ap = {0, 3, 6, 8, 10};
	    int[] Ai = {1, 3, 0, 1, 3, 2, 2, 0, 3, 1};
	    double[] Ax= {3.1, 3.5, 4.5, 2.9, 0.4, 1.7, 3.0, 3.2, 1.0, 0.9};
	    double[] b = {2,2,2,2}; //Right hand side
	    
	    Dcs_common.Dcs matrix = Dcs_util.cs_spalloc(size, size, nz, true, false);
	    matrix.p = Ap;
	    matrix.i = Ai;
	    matrix.x = Ax;
		
	    boolean result =  Dcs_lusol.cs_lusol(1, matrix, b, 1.0); //Result will be in b
	    return result;
	}
	
	public static boolean demo2(){
		MatrixResolver matrix = new SparseMatrix();
		matrix.newMatrix(4);
		
		matrix.pushCoefficient(4.5);
		matrix.pushCoefficient(3.1);
		matrix.pushCoefficient(0);
		matrix.pushCoefficient(3.5);
		matrix.pushColumn();

		matrix.pushCoefficient(0);
		matrix.pushCoefficient(2.9);
		matrix.pushCoefficient(1.7);
		matrix.pushCoefficient(0.4);
		matrix.pushColumn();

		matrix.pushCoefficient(3.2);
		matrix.pushCoefficient(0);
		matrix.pushCoefficient(3.0);
		matrix.pushCoefficient(0);
		matrix.pushColumn();
		
		matrix.pushCoefficient(0);
		matrix.pushCoefficient(0.9);
		matrix.pushCoefficient(0);
		matrix.pushCoefficient(1.0);
		matrix.pushColumn();
		
	    //int size = 4; //Size of the square matrix
	    //int nz = 10;  //Number of non zero entries
	    //int[] Ap = {0, 3, 6, 8, 10};
	    //int[] Ai = {1, 3, 0, 1, 3, 2, 2, 0, 3, 1};
	    //double[] Ax= {3.1, 3.5, 4.5, 2.9, 0.4, 1.7, 3.0, 3.2, 1.0, 0.9};
	    double[] b = {2,2,2,2}; //Right hand side
	    
	    //solution = {0.00211652654477031,0.0787818213886764,0.622023634546417,1.96107942853783}
	    
	    matrix.solve(b);
	    return true;
	}